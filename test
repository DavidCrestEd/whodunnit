import random
from pyscript import Element
from js import window

# ----- DATA -----
cases = [
    {
        "quote": "The city was a sleeping beast under the fog.",
        "feature": "Metaphor",
        "effect": "Creates a sense of danger and latent energy.",
        "decoys": [
            ("Personification", "Gives human qualities to the city to make it relatable."),
            ("Imagery", "Appeals to the reader's senses for vividness."),
            ("Simile", "Directly compares two things using 'like' or 'as'.")
        ]
    },
    {
        "quote": "Her smile was as bright as the morning sun.",
        "feature": "Simile",
        "effect": "Conveys warmth and positivity through comparison.",
        "decoys": [
            ("Metaphor", "Suggests one thing is another to deepen meaning."),
            ("Tone", "Sets the emotional attitude of the text."),
            ("Alliteration", "Repeats initial consonant sounds for rhythm.")
        ]
    },
    {
        "quote": "The silence screamed louder than any words.",
        "feature": "Irony",
        "effect": "Contradicts expectation to highlight tension.",
        "decoys": [
            ("Hyperbole", "Exaggerates for dramatic effect."),
            ("Imagery", "Appeals to the reader's senses."),
            ("Personification", "Gives human actions to non-human things.")
        ]
    },
    {
        "quote": "We shall fight on the beaches, we shall fight on the landing grounds...",
        "feature": "Repetition",
        "effect": "Emphasises determination and resilience.",
        "decoys": [
            ("Parallelism", "Uses similar grammatical structures for balance."),
            ("Tone", "Sets the speech's emotional attitude."),
            ("Anaphora", "Repeats a word/phrase at the start of clauses.")
        ]
    },
    {
        "quote": "A sudden chill ran down his spine.",
        "feature": "Imagery",
        "effect": "Appeals to the sense of touch to evoke fear.",
        "decoys": [
            ("Metaphor", "Compares without 'like' or 'as'."),
            ("Tone", "Establishes emotional stance."),
            ("Personification", "Gives human traits to non-human things.")
        ]
    }
]

# ----- STATE -----
score = 0
current_case = None
attempts = 0
cases_played = 0
round_over = False  # <-- NEW

# Optionally keep track of used cases to avoid repeats in one session
unused = cases.copy()

def refresh_score():
    Element("scoreboard").write(f"Score: {score} | Cases solved: {cases_played}")

def load_case():
    global current_case, attempts, round_over, unused
    attempts = 0
    round_over = False
    Element("feedback").write("")
    Element("nextBtn").element.style.display = "none"

    # pick without immediate repetition if possible
    if not unused:
        unused = cases.copy()
    current_case = random.choice(unused)
    unused.remove(current_case)

    Element("case").write(
        f"<div class='quote'>\"{current_case['quote']}\"</div>"
        "<p>Which stylistic feature is at work here?</p>"
    )
    suspects = [(current_case["feature"], current_case["effect"])] + current_case["decoys"]
    random.shuffle(suspects)

    # Note: passing only the feature to the click handler (effect text isn’t needed in the callback)
    buttons_html = "".join([
        f"<div class='suspect' onclick='select_suspect(\"{f}\")'><b>{f}</b><br><small>{e}</small></div>"
        for f, e in suspects
    ])
    Element("suspects").write(buttons_html)
    refresh_score()

def select_suspect(feature):
    global score, attempts, cases_played, round_over
    if round_over:
        return  # <-- ignore extra clicks after round ends

    attempts += 1
    if feature == current_case["feature"]:
        points = 3 if attempts == 1 else 1
        score += points
        cases_played += 1
        round_over = True  # <-- lock the round
        Element("feedback").write(
            f"✅ Correct! This is <b>{feature}</b>. Effect: {current_case['effect']} (+{points} points)"
        )
        Element("nextBtn").element.style.display = "inline-block"
    else:
        if attempts < 2:
            Element("feedback").write("❌ Not quite. Try again.")
        else:
            cases_played += 1
            round_over = True  # <-- lock the round
            Element("feedback").write(
                f"❌ Wrong. The answer was <b>{current_case['feature']}</b>. "
                f"Effect: {current_case['effect']}"
            )
            Element("nextBtn").element.style.display = "inline-block"
    refresh_score()

# Expose to JS so onclick works
window.select_suspect = select_suspect

def next_case(evt=None):
    if cases_played >= 5:
        Element("case").write("<h2>Case Files Closed</h2><p>Well done, detective!</p>")
        Element("suspects").write("")
        Element("feedback").write(f"Final Score: {score} points")
        Element("nextBtn").element.style.display = "none"
    else:
        load_case()

Element("nextBtn").element.addEventListener("click", next_case)
load_case()
